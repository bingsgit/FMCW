module windowing(
	input [11:0] in1,
	input [11:0] in2,
	input in_ready,
	input clk,
	output [11:0] out1,
	output [11:0] out2
	);
	
	reg [10:0] addr_counter;
	wire [10:0] addr_a, addr_b;
	reg [7:0] data_a, data_b;
	reg [2:0] state, nextState;
	
	
	memory memory_inst (.addr_a(addr_a), .addr_b(addr_b),
							  .clk(clk), .q_a(data_a), .q_b(data_b));
							  
	localparam s0 = 3'b000;
	localparam s1 = 3'b001;
	localparam s2 = 3'b010;
	localparam s3 = 3'b011;
	localparam s4 = 3'b100;
	localparam s5 = 3'b101;
	localparam s6 = 3'b110;
	localparam s7 = 3'b111;

	initial begin
		addr_counter = 0;
		addr_a = 0;
		addr_b = 0;
		state = s0;
		nextState = s0;
	end
	
	assign addr_a = addr_counter;
	assign addr_b = addr_counter + 1;
	
	always @ (posedge clk) begin
		if(!reset_n) begin
			state <= s0;
		end
		else begin
			state <= nextState;
		end
	end
	
	always @ (posedge clk) begin
		if(reset_addr_counter)
			addr_counter <= 0;
		else if(incre_addr_counter)
			addr_counter <= addr_counter + 2;
			
		if(update_output) begin
			out1 <= in1 * data_a;
			out2 <= in2 * data_b;
		end
			
	end
	
	always @ * begin
		case(state)
			s0: begin
				if(in_ready)
					nextState = s1;
				else
					nextState = s0;
			end
			
			s1: begin
				update_output = 1;
				nextState = s2;
			end
			
			s2: begin
				update_counter = 1;
				nextState = s0;
			end
			
			
			
			
		endcase
	end
	
	
	
	
	
endmodule
